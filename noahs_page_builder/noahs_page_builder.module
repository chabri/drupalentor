<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\views\Views;
use Drupal\Core\Url;
use Drupal\noahs_page_builder\WidgetBase;
use Drupal\Core\Asset\LibraryDiscoveryInterface;
use Drupal\noahs_page_builder\Controller\NoahsController;
use Drupal\block\Entity\Block;
use Drupal\noahs_page_builder\Controls_Base;
use Drupal\Core\File\FileSystem;

$moduleHandler = \Drupal::service('module_handler');


define( 'NOAHS_PAGE_BUILDER_PATH',  \Drupal::service('extension.list.module')->getPath('noahs_page_builder') );
if ($moduleHandler->moduleExists('noahs_page_builder_pro')) {
define( 'NOAHS_PAGE_BUILDER_PRO_PATH',  \Drupal::service('extension.list.module')->getPath('noahs_page_builder_pro') );
}else{
    define( 'NOAHS_PAGE_BUILDER_PRO_PATH', '' );
}
define( 'NOAHS_PAGE_BUILDER_CSS_PATH', 'public://noahs_css');


function noahs_page_builder_theme_registry_alter(&$theme_registry) {

    // $theme_registry['page']['path'] = \Drupal::service('extension.list.module')->getPath('noahs_page_builder') . '/templates';
  }

  function noahs_page_builder_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    $route = \Drupal::routeMatch()->getRouteName();


    if($route === 'entity.node.canonical'){
        $suggestions[] = 'page__noahs__front';
    }
    
  }

function noahs_page_builder_preprocess_html(array &$vars) {

   
    $route = \Drupal::routeMatch()->getRouteName();


    $quote_menu_paths = [
      'noahs_page_builder.editor',
    ];
    
    

    // If the route matches, add the class to the pages above.
    // We then use this class for theming.
    if (in_array($route, $quote_menu_paths)) {
      $vars['attributes']['class'][] = 'noahs_page_builder-editor-active';
    }
  }
  
function noahs_page_builder_theme($existing, $type, $theme, $path) {
  return array(
    'noahs-admin-form' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
            'url' => '',
            'widgets' => [],
            'page_settings' => [],
        ),
        'path' => $path . '/templates/backend',
    ),
    'noahs-admin-preview' => array(
        'variables' => array(
            'content' => '',
            'page_settings' => [],
        ),
        'path' => $path . '/templates/backend',
    ),

    'html__preview__noahs_page_builder' => array(
        'template' => 'html--preview--noahs',
        'base hook' => 'html',
        'path' => $path . '/templates/backend',
    ),
    'html__node__noahs_page_builder' => array(
        'template' => 'html--node--noahs',
        'base hook' => 'html',
        'path' => $path . '/templates/backend',
    ),
    'page__preview__noahs_page_builder' => array(
        'template' => 'page--preview--noahs',
        'base hook' => 'page',
        'path' => $path . '/templates/backend',
    ),
    'page__node__noahs_page_builder' => array(
        'template' => 'page--node--noahs',
        'base hook' => 'page',
        'path' => $path . '/templates/backend',
    ),
    'noahs-admin-edit-widget' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
        ),
        'path' => $path . '/templates/backend',
    ),
    'noahs_icons_list' => array(
        'variables' => array(
            'content' => '',
            'icons' => '',
        ),
        'path' => $path . '/templates/backend',
    ),
    'noahs-admin-final-widget' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
        ),
        'path' => $path . '/templates/frontend',
    ),
    'page__noahs__front' => array(
        'template' => 'page--noahs--front',
        'base hook' => 'html',
        'path' => $path . '/templates/frontend',
    ),
      
  );
}

function noahs_page_builder_preprocess_page(&$variables) {

    $route = \Drupal::routeMatch()->getRouteName();
    $route_match = \Drupal::routeMatch();
    $node = $route_match->getParameter('node');


    if($route === 'entity.node.canonical'){
      
        $node_id = $node->id();
        $variables['#attached']['library'][] = 'noahs_page_builder/noahs_page_builder.assets.frontend';
        $data = noahs_page_builder_load($node_id) ?? NULL;

        $sections = noahs_page_builder_get_sections($data->html);

        $classes = \Drupal::classResolver(NoahsController::class)->getClasses($data, 'class');
        $attributes = \Drupal::classResolver(NoahsController::class)->getClasses($data, 'attributes');

        // dump($attributes);
        $variables['#attached']['drupalSettings']['noahs_page_builder']['classes'] = $classes;
        $variables['#attached']['drupalSettings']['noahs_page_builder']['attributes'] = $attributes;

        $variables['custom_variable'] = noahs_page_builder_html_generated($sections);

    }
}

function noahs_page_builder_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.noahs_page_builder':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allow users to request protected downloads.') . '</p>';
      return $output;
  }
}
 function load_noahs_page_builder_widgets(){

    $default_theme = \Drupal::config('system.theme')->get('default');
    $themePath = \Drupal::service('extension.path.resolver')->getPath('theme',  $default_theme);

    $elements = [];

    //Theme widgets
    if(file_exists($themePath . '/widgets/widgets.php')){
        require $themePath . '/widgets/widgets.php';
        if(function_exists('noahs_page_builder_custom_widgets')){
            $elements = noahs_custom_widgets();

        }
        foreach( $elements as $el ){ 
            if(file_exists($themePath . '/widgets/' . $el . '.php')){
            require $themePath . '/widgets/' . $el . '.php';
            }
        }
    }
    //Default Widgets
    if(file_exists(NOAHS_PAGE_BUILDER_PATH . '/includes/widgets/widgets.php')){

        require NOAHS_PAGE_BUILDER_PATH . '/includes/widgets/widgets.php';
    
        if(function_exists('noahs_widgets')){
          $elements = noahs_widgets();
        }
    
        foreach( $elements as $el ){ 
            if(file_exists(NOAHS_PAGE_BUILDER_PATH . '/includes/widgets/' . $el . '.php')){

            require NOAHS_PAGE_BUILDER_PATH . '/includes/widgets/' . $el . '.php';
            }
        }
      }
       //Pro Widgets
       if(file_exists(NOAHS_PAGE_BUILDER_PRO_PATH . '/includes/widgets/widgets.php')){

        require NOAHS_PAGE_BUILDER_PRO_PATH . '/includes/widgets/widgets.php';
  
        if(function_exists('noahs_pro_widgets')){
          $elements = noahs_pro_widgets();

        }
    
        foreach( $elements as $el ){ 
            if(file_exists(NOAHS_PAGE_BUILDER_PRO_PATH . '/includes/widgets/' . $el . '.php')){

            require NOAHS_PAGE_BUILDER_PRO_PATH . '/includes/widgets/' . $el . '.php';
            }
        }
      }
 }

load_noahs_page_builder_widgets();


function noahs_page_builder_get_widget_fields($widgetId){


    $el_fields = array();
    $default_fields = new Controls_Base;
    $array1 = $default_fields->defaultFields();


    $_class = 'element_' . $widgetId;

    if( class_exists($_class) ){

        $s = new $_class;

        if(method_exists($s, 'render_form')){
    
            $el_fields = $s->render_form();
        
        }
    }


    $el_fields = array_merge($el_fields, $array1);

    return $el_fields;
  }

  function noahs_page_builder_get_widgets(){
    $data = array();
    $theme_elements = [];
    $noahs_page_builder_elements = [];
    $noahs_page_builder_pro_elements = [];

    if(function_exists('noahs_custom_widgets')){
        $theme_elements = noahs_custom_widgets();
    }
    if(function_exists('noahs_pro_widgets')){
        $theme_elements = noahs_pro_widgets();
    }

    $noahs_page_builder_elements = noahs_widgets();

    $merge_widgets = array_merge($noahs_page_builder_elements, $theme_elements, $noahs_page_builder_pro_elements); 

    foreach( $merge_widgets as $el ){
        $_class = 'element_' . $el;
 
        if( class_exists($_class) && $_class != 'element_noahs_column'){
            
            $s = new $_class;
            if(method_exists($s, 'data')){
            
                $data[$el] = $s->data();
                
            }
        }
    }

    // Array para almacenar elementos agrupados por "group"
    $groupedArray = [];

    // Iterar sobre el array original y agrupar por la clave "group"
    foreach ($data as $key => $value) {
        $group = $value['group'];
        
        // Si el grupo aún no existe en el nuevo array, inicializarlo como un array vacío
        if (!isset($groupedArray[$group])) {
            $groupedArray[$group] = [];
        }
        
        // Añadir el elemento al grupo correspondiente
        $groupedArray[$group][$key] = $value;
    }

    return $groupedArray;
  }

function noahs_page_builder_get_sections($html){
    $sections = [];
 
    if($html){
        $content = json_decode($html);

        foreach ( $content as $k => $row ) {

            $row->settings = isset($row->settings) ? json_encode($row->settings) : '{}';

            $sections[$k] = $row->settings;

        }

        return $content;
    }
}


function noahs_page_builder_render_element($el_settings, $content =''){


    $id = $el_settings->type;
    $_class = 'element_' . $id;

    if (is_string($el_settings->settings)) {
        $el_settings->settings = json_decode($el_settings->settings);
    }


    if( class_exists($_class) ){

        $s = new $_class;
        if(method_exists($s, 'render_content')){
            return $s->render_content($el_settings, $content);
        }
    }
}


function noahs_page_builder_html_generated($sections){

$html = '';
    if ($sections) {
        foreach ($sections as $key => $section) {

            $widget_id = $section->type;
           $html .= print_widgets($section);
        }
    }

    return $html;
}

function print_widgets($widget)
{
    $content = '';

    $columns = $widget->columns;

    if (!empty($columns)) {
        foreach ($columns as $ckey => $column) {
            $elements = $column->elements;
            $element_content = ''; // Reset $element_content for each column
  
            if (!empty($elements)) {
                foreach ($elements as $ekey => $element) {
                    // Fetch element settings
     
                    $element_settings_json = noahs_page_builder_load_widget($element->id) ? noahs_page_builder_load_widget($element->id) : $element;
                    // $element_settings = $element_settings_json ? json_decode($element_settings_json, true) : null;
             
               
                    // Render element

                    $html_element = noahs_page_builder_render_element($element_settings_json);

                    if(!empty($html_element)){
                        $html_element_sin_tabs = preg_replace('/\t/', '', $html_element);
                        $output_element = $html_element_sin_tabs;
                        $element_content .= $output_element;
                    }
                }
            }


            // Fetch column settings
            $column_settings_json = noahs_page_builder_load_widget($column->id) ? noahs_page_builder_load_widget($column->id) : $column;
            // $column_settings = $column_settings_json ? json_decode($column_settings_json, true) : null;

            // Render column with elements
            $html = noahs_page_builder_render_element($column_settings_json, $element_content);
            $html_sin_tabs = preg_replace('/\t/', '', $html);
          
            $output = $html_sin_tabs;
            $content .= $output;
            
        }
    }

    // Fetch section settings

    $section_settings_json = noahs_page_builder_load_widget($widget->id) ? noahs_page_builder_load_widget($widget->id) : $widget;
  
// dump($section_settings_json);
    // $section_settings = $section_settings_json ? json_decode($section_settings_json, true) : null;
    // dump( $content);
    // Render section with columns and elements

    $html = noahs_page_builder_render_element($section_settings_json, $content);
    $html_sin_tabs = preg_replace('/\t/', '', $html);

    $output = $html_sin_tabs;


    return $output;
    
}

function noahs_page_builder_load($nid) {
    $result = \Drupal::database()->select('{noahs_page_builder_page}', 'd')
    ->fields('d')
    ->condition('did', $nid, '=')
    ->execute()
    ->fetchObject();
    $page = new stdClass();
    if($result){   
        $page->nid = $result->nid;  
        $page->did = $result->did;
        $page->uid = $result->uid;
        $page->html = $result->settings;
        $page->page_settings = $result->page_settings;
    }else{
        $page->html = array();
    }

  return $page;
}


function noahs_page_builder_load_widget($wid) {
    $result = \Drupal::database()->select('{noahs_page_builder_widget}', 'd')
    ->fields('d')
    ->condition('wid', $wid, '=')
    ->execute()
    ->fetchObject();

  return $result;
}

function noahs_page_builder_load_blocks() {
    $theme = \Drupal::theme()->getActiveTheme();

    // Obtener los bloques activos en el tema.
    $block_list = [];
    foreach (Block::loadMultiple() as $block_id => $block) {
        if ($block->getTheme() === $theme->getName()) {
            $block_list[$block_id] = $block->label();
        }
    }

    return $block_list;
}

function noahs_page_builder_load_views() {
     $getViews = Views::getViewsAsOptions(TRUE, 'all', NULL, FALSE, TRUE);
     $viewsData = \Drupal::service('views.views_data');
     $views = [];
     foreach ($getViews as $key => $view_name_master) {
        $view = Views::getView($key);
        foreach ($view->storage->get('display') as $name_id => $display_id) {

           if( $display_id['display_plugin'] == 'block' ){

              $views[$key][] = [
                'view_id' => $key, 
                'block_id' =>  htmlspecialchars(json_encode(array($key, $name_id)), ENT_QUOTES, 'UTF-8'), 
                'text' => $display_id['display_title'],
                'master' => $view_name_master,
            ];
           }
        }
     }

    return $views;
}


function noahs_page_builder_generate_css($theme, $css, $name){

    $file_system = \Drupal::service('file_system');
    $directory = NOAHS_PAGE_BUILDER_CSS_PATH;

    $suffix = time();
    \Drupal::state()->set('css_name', $name);
    $name = Drupal::state()->get('css_name') ?: NULL;

    $old_suffix = \Drupal::state()->get('noahs_page_builder_suffix') ?: NULL;
    if ($old_suffix) {
        \Drupal::service('file_system')->delete($directory . '/'.$name . $old_suffix . '.css');
    }
    \Drupal::state()->set('noahs_page_builder_suffix', $suffix);

   
    $file_system->prepareDirectory($directory, FileSystemInterface:: CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS | FileSystemInterface::EXISTS_REPLACE);
    $file_system->saveData($css, $directory . '/'.$name . $suffix . '.css', FileSystemInterface::EXISTS_REPLACE);


    \Drupal::state()->set('css_file_name', $name.$suffix.'.css');


}

function noahs_page_builder_library_info_alter(&$libraries, $extension) {

    if ($extension != 'noahs_page_builder') {
        return;
    }
    $css_suffix = \Drupal::state()->get('noahs_page_builder_suffix') ?: NULL;
    $name = Drupal::state()->get('css_name') ?: NULL;
    $active_theme = \Drupal::theme()->getActiveTheme()->getName();
    $defaultThemeName = \Drupal::config('system.theme')->get('default');    

    if($active_theme === $defaultThemeName){
        if ($css_suffix) {
            $cssfile = NOAHS_PAGE_BUILDER_CSS_PATH . '/'.$name . $css_suffix . '.css';
            
        }
        else {
            $cssfile = NOAHS_PAGE_BUILDER_CSS_PATH . '/'.$name.'.css';
        }

        if (file_exists($cssfile)) {

            $css_path = \Drupal::service('file_url_generator')->generateAbsoluteString($cssfile);
          
            $libraries['noahs_page_builder_custom_styles']['css']['theme'][$css_path]['weight'] = 9999;
        }
    }
}

function noahs_page_builder_page_attachments(array &$page) {

    $active_theme = \Drupal::theme()->getActiveTheme()->getName();
    $defaultThemeName = \Drupal::config('system.theme')->get('default');    
    $node = \Drupal::routeMatch()->getParameter('node');
    $current_uri = \Drupal::request()->getRequestUri();
    if($node){
    
        if($active_theme === $defaultThemeName && $current_uri != '/node/'.$node->id().'/noahs_page_builder'){

            $page['#attached']['library'][] = 'noahs_page_builder/noahs_page_builder_custom_styles';
        }else{
            \Drupal::state()->get('css_file_name') ?: NULL;
            $page['#attached']['drupalSettings']['noahs_page_builder']['load_c_styles'] = \Drupal::state()->get('css_file_name') ?: NULL;
        }
    }
}
function noahs_page_builder_page_attachments_alter(array &$attachments) {
    $route_match = \Drupal::routeMatch();
    $route = \Drupal::routeMatch()->getRouteName();

    $css_element = noahs_page_builder_add_node_css($route_match);

    if ($route === 'noahs_page_builder.preview' || $route === 'entity.node.canonical') {
      $attachments['#attached']['html_head'][] = [$css_element, 'noahs_page_builder_node_css'];
    }
  }
 


function noahs_page_builder_add_node_css(RouteMatchInterface $route_match) {
    $node = $route_match->getParameter('node');
    if(!empty($node)){
        $nid = $node->id();
      $css_file_name = 'noahs_page_builder_' . $nid . '.css';

      if (file_exists('public://noahs_page_builder/' . $css_file_name)) {
        $file_uri = 'public://noahs_page_builder/' . $css_file_name;

        $file_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_uri);


        
        $element = [
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'stylesheet',
            'href' => $file_url,
          ],
        ];
        
        return $element;
      }
    }
  }
  