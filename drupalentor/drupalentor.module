<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\views\Views;
use Drupal\Core\Url;
use Drupal\drupalentor\WidgetBase;
use Drupal\Core\Asset\LibraryDiscoveryInterface;
use Drupal\drupalentor\Controller\DrupalentorController;
use Drupal\block\Entity\Block;


define( 'DRUPALENTOR_PATH',  \Drupal::service('extension.list.module')->getPath('drupalentor') );
define( 'DRUPALENTOR_CSS_PATH', 'public://css');

function drupalentor_theme_registry_alter(&$theme_registry) {

    // $theme_registry['page']['path'] = \Drupal::service('extension.list.module')->getPath('drupalentor') . '/templates';
  }

  function drupalentor_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    $route = \Drupal::routeMatch()->getRouteName();


    if($route === 'entity.node.canonical'){
        $suggestions[] = 'page__drupalentor__front';
    }
    
  }
function drupalentor_preprocess_html(array &$vars) {

   
    $route = \Drupal::routeMatch()->getRouteName();


    $quote_menu_paths = [
      'drupalentor.editor',
    ];
    
    

    // If the route matches, add the class to the pages above.
    // We then use this class for theming.
    if (in_array($route, $quote_menu_paths)) {
      $vars['attributes']['class'][] = 'drupalentor-editor-active';
    }
  }
  
function drupalentor_theme($existing, $type, $theme, $path) {
  return array(
    'drupalentor-admin-form' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
            'url' => '',
            'widgets' => [],
        ),
        'path' => $path . '/templates/backend',
    ),
    'drupalentor-admin-preview' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
        ),
        'path' => $path . '/templates/backend',
    ),
    'html__preview__drupalentor' => array(
        'template' => 'html--preview--drupalentor',
        'base hook' => 'html',
        'path' => $path . '/templates/backend',
    ),
    'html__node__drupalentor' => array(
        'template' => 'html--node--drupalentor',
        'base hook' => 'html',
        'path' => $path . '/templates/backend',
    ),
    'page__preview__drupalentor' => array(
        'template' => 'page--preview--drupalentor',
        'base hook' => 'page',
        'path' => $path . '/templates/backend',
    ),
    'page__node__drupalentor' => array(
        'template' => 'page--node--drupalentor',
        'base hook' => 'page',
        'path' => $path . '/templates/backend',
    ),
    'drupalentor-admin-edit-widget' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
        ),
        'path' => $path . '/templates/backend',
    ),
    'drupalentor-admin-final-widget' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
        ),
        'path' => $path . '/templates/frontend',
    ),
    'page__drupalentor__front' => array(
        'template' => 'page--drupalentor--front',
        'base hook' => 'html',
        'path' => $path . '/templates/frontend',
    ),
      
  );
}

function drupalentor_preprocess_page(&$variables) {

    $route = \Drupal::routeMatch()->getRouteName();
    $route_match = \Drupal::routeMatch();
    $node = $route_match->getParameter('node');


    if($route === 'entity.node.canonical'){
      
        $node_id = $node->id();
        $variables['#attached']['library'][] = 'drupalentor/drupalentor.assets.frontend';
        $data = drupalentor_load($node_id) ?? NULL;

        $sections = drupalentor_get_sections($data->html);
        $classes = \Drupal::classResolver(DrupalentorController::class)->getClasses($data);
        $variables['#attached']['drupalSettings']['drupalentor']['classes'] = $classes;
        $variables['custom_variable'] = drupalentor_html_generated($sections);

    }
}

function drupalentor_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.drupalentor':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allow users to request protected downloads.') . '</p>';
      return $output;
  }
}

if(file_exists(DRUPALENTOR_PATH . '/includes/widgets/_elements.php')){

    require \Drupal::service('extension.list.module')->getPath('drupalentor') . '/includes/widgets/_elements.php';

    $elements = [];

    if(function_exists('drupalentor_widgets')){
      $elements = drupalentor_widgets();

    }

    foreach( $elements as $el ){ 
        if(file_exists(DRUPALENTOR_PATH . '/includes/widgets/' . $el . '.php')){
        $sc_path = DRUPALENTOR_PATH . '/includes/widgets/' . $el . '.php';
        require \Drupal::service('extension.list.module')->getPath('drupalentor') . '/includes/widgets/' . $el . '.php';
        }
    }

  }

function drupalentor_get_el_fields($widgetId){
    $el_fields = array();

        $_class = 'element_' . $widgetId;
        // require \Drupal::service('extension.list.module')->getPath('drupalentor') . '/widgets/' . $widgetId . '.php';
  
        if( class_exists($_class) ){

            $s = new $_class;
   
            if(method_exists($s, 'render_form')){
     
               $el_fields = $s->render_form();
          
            }
        }


    return $el_fields;
  }
//   function drupalentor_get_el_fields($widgetId){
//     $el_fields = array();
//     $theme_load_elements = gavias_content_builder_theme_name();
//     if(function_exists('gavias_content_builder_set_elements')){
//       $elements = gavias_content_builder_set_elements();
//       foreach( $elements as $el ){
//         if(file_exists(\Drupal::service('extension.list.theme')->getPath($theme_load_elements['theme_name']) . '/drupalentor_content_builder/' . $el . '.php')){
//           $_class = 'element_' . $el;
//           if( class_exists($_class) ){
//             $s = new $_class;
//             if(method_exists($s, 'render_form')){
//                $el_fields[$el] = $s->render_form();
//             }
//           }
//         }
//       }
//     }
//     return $el_fields;
//   }
  function drupalentor_get_widgets(){
    $data = array();

    if(function_exists('drupalentor_widgets')){
      $elements = drupalentor_widgets();

      foreach( $elements as $el ){
      
        if(file_exists(DRUPALENTOR_PATH . '/includes/widgets/' . $el . '.php')){
          $_class = 'element_' . $el;
         
          if( class_exists($_class) && $_class != 'element_drupalentor_column'){
            $s = new $_class;
            if(method_exists($s, 'data')){

               $data[$el] = $s->data();
            
            }
          }
        }
      }
    }
    // Array para almacenar elementos agrupados por "group"
    $groupedArray = [];

    // Iterar sobre el array original y agrupar por la clave "group"
    foreach ($data as $key => $value) {
        $group = $value['group'];
        
        // Si el grupo aún no existe en el nuevo array, inicializarlo como un array vacío
        if (!isset($groupedArray[$group])) {
            $groupedArray[$group] = [];
        }
        
        // Añadir el elemento al grupo correspondiente
        $groupedArray[$group][$key] = $value;
    }
    return $groupedArray;
  }

function drupalentor_get_sections($html){
    $sections = [];

    if($html){
        $content = json_decode($html, true);

        foreach ( $content as $k => $row ) {

            $row['settings'] = isset($row['settings']) ? $row['settings'] : '{}';

            $sections[$k] = $row['settings'];

        }

        return $content;
    }
}


function drupalentor_render_element(array $section, $settings = array(), $content =''){

    $id = $section['type'];
    $_class = 'element_' . $id;
    if( class_exists($_class) ){

        $s = new $_class;
        $default_settings = [];
        if(method_exists($s, 'render_content')){
            if(method_exists($s, 'render_form')){
                $default_settings = json_encode($s->render_form());
            }

        
            return $s->render_content($section, $settings, $content);
        }
    }
}


function drupalentor_html_generated($sections){
    $html = '';
    if ($sections) {


        foreach ($sections as $key => $section) {
            $widget_id = $section['type'];
           $html .= print_widgets($section);
        }
    }
 return $html;
}

function print_widgets($widget)
{
    $content = '';
    $settings = $widget['settings'] ?? '[]';
    $columns = $widget['columns'];

    if (!empty($columns)) {
        foreach ($columns as $ckey => $column) {
            $elements = $column['elements'];
            $element_content = ''; // Reset $element_content for each column

            if (!empty($elements)) {
                foreach ($elements as $ekey => $element) {
                    // Fetch element settings
                    $element_settings_json = drupalentor_load_widget($element['id'])->settings ?? null;
                    $element_settings = $element_settings_json ? json_decode($element_settings_json, true) : null;

                    // Render element
                    $html_element = drupalentor_render_element($element, $element_settings);
                    $html_element_sin_tabs = preg_replace('/\t/', '', $html_element);
                    $output_element = $html_element_sin_tabs;
                    $element_content .= $output_element;
                }
            }

            // Fetch column settings
            $column_settings_json = drupalentor_load_widget($column['id'])->settings ?? null;
            $column_settings = $column_settings_json ? json_decode($column_settings_json, true) : null;

            // Render column with elements
            $html = drupalentor_render_element($column, $column_settings, $element_content);
            $html_sin_tabs = preg_replace('/\t/', '', $html);
            $output = $html_sin_tabs;
            $content .= $output;
        }
    }

    // Fetch section settings
    $section_settings_json = drupalentor_load_widget($widget['id'])->settings ?? null;
    $section_settings = $section_settings_json ? json_decode($section_settings_json, true) : null;

    // Render section with columns and elements
    $html = drupalentor_render_element($widget, $section_settings, $content);
    $html_sin_tabs = preg_replace('/\t/', '', $html);
    $output = $html_sin_tabs;

    return $output;
    
}

function drupalentor_load($nid) {
    $result = \Drupal::database()->select('{drupalentor_page}', 'd')
    ->fields('d')
    ->condition('did', $nid, '=')
    ->execute()
    ->fetchObject();
    $page = new stdClass();
    if($result){   
        $page->nid = $result->nid;  
        $page->did = $result->did;
        $page->uid = $result->uid;
        $page->html = $result->settings;
    }else{
        $page->html = array();
    }

  return $page;
}


function drupalentor_load_widget($wid) {
    $result = \Drupal::database()->select('{drupalentor_widget}', 'd')
    ->fields('d')
    ->condition('wid', $wid, '=')
    ->execute()
    ->fetchObject();
  return $result;
}

function drupalentor_load_blocks() {
    $theme = \Drupal::theme()->getActiveTheme();

    // Obtener los bloques activos en el tema.
    $block_list = [];
    foreach (Block::loadMultiple() as $block_id => $block) {
        if ($block->getTheme() === $theme->getName()) {
            $block_list[$block_id] = $block->label();
        }
    }

    return $block_list;
}

function drupalentor_load_views() {
     $getViews = Views::getViewsAsOptions(TRUE, 'all', NULL, FALSE, TRUE);
     $viewsData = \Drupal::service('views.views_data');
     $views = [];
     foreach ($getViews as $key => $view_name_master) {
        $view = Views::getView($key);
// dump($key);
        foreach ($view->storage->get('display') as $name_id => $display_id) {

           if( $display_id['display_plugin'] == 'block' ){

              $views[$key][] = [
                'view_id' => $key, 
                'block_id' =>  htmlspecialchars(json_encode(array($key, $name_id)), ENT_QUOTES, 'UTF-8'), 
                'text' => $display_id['display_title'],
                'master' => $view_name_master,
            ];
           }
        }
     }

    return $views;
}


function drupalentor_generate_css($theme, $css, $name){

    $csspath = DRUPALENTOR_CSS_PATH;
    $suffix = time();
    \Drupal::state()->set('css_name', $name);
    $name = Drupal::state()->get('css_name') ?: NULL;

    $old_suffix = \Drupal::state()->get('drupalentor_suffix') ?: NULL;
    if ($old_suffix) {
        \Drupal::service('file_system')->delete($csspath . '/'.$name . $old_suffix . '.css');
    }
    \Drupal::state()->set('drupalentor_suffix', $suffix);
    \Drupal::service('file_system')->prepareDirectory($csspath, FileSystemInterface::MODIFY_PERMISSIONS);
    \Drupal::service('file_system')->saveData($css, $csspath . '/'.$name . $suffix . '.css', FileSystemInterface::EXISTS_REPLACE);
    \Drupal::state()->set('css_file_name', $name.$suffix.'.css');

    _drupal_flush_css_js();
}

function drupalentor_library_info_alter(&$libraries, $extension) {
    if ($extension != 'drupalentor') {
        return;
    }
    $css_suffix = \Drupal::state()->get('drupalentor_suffix') ?: NULL;
    $name = Drupal::state()->get('css_name') ?: NULL;
    $active_theme = \Drupal::theme()->getActiveTheme()->getName();
    $defaultThemeName = \Drupal::config('system.theme')->get('default');    

    if($active_theme === $defaultThemeName){
        if ($css_suffix) {
            $cssfile = DRUPALENTOR_CSS_PATH . '/'.$name . $css_suffix . '.css';
        }
        else {
            $cssfile = DRUPALENTOR_CSS_PATH . '/'.$name.'.css';
        }

        if (file_exists($cssfile)) {
            $css_path = '/'.ltrim(file_url_transform_relative(file_create_url($cssfile)), '/');
            $libraries['drupalentor_custom_styles']['css']['theme'][$css_path]['weight'] = 9999;
        }
    }
}

function drupalentor_page_attachments(array &$page) {
    $active_theme = \Drupal::theme()->getActiveTheme()->getName();
    $defaultThemeName = \Drupal::config('system.theme')->get('default');    
    $node = \Drupal::routeMatch()->getParameter('node');
    $current_uri = \Drupal::request()->getRequestUri();
    if($node){
        if($active_theme === $defaultThemeName && $current_uri != '/node/'.$node->id().'/drupalentor'){
            $page['#attached']['library'][] = 'drupalentor/drupalentor_custom_styles';
        }else{
            \Drupal::state()->get('css_file_name') ?: NULL;
            $page['#attached']['drupalSettings']['drupalentor']['load_c_styles'] = \Drupal::state()->get('css_file_name') ?: NULL;
        }
    }
}
function drupalentor_page_attachments_alter(array &$attachments) {
    $route_match = \Drupal::routeMatch();
    $route = \Drupal::routeMatch()->getRouteName();

    $css_element = drupalentor_add_node_css($route_match);

    if ($route === 'drupalentor.preview' || $route === 'entity.node.canonical') {
      $attachments['#attached']['html_head'][] = [$css_element, 'drupalentor_node_css'];
    }
  }
 


function drupalentor_add_node_css(RouteMatchInterface $route_match) {
    $node = $route_match->getParameter('node');
    if(!empty($node)){
        $nid = $node->id();
      $css_file_name = 'drupalentor_' . $nid . '.css';

      if (file_exists('public://drupalentor/' . $css_file_name)) {
        $file_uri = 'public://drupalentor/' . $css_file_name;

        $file_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file_uri);


        
        $element = [
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#attributes' => [
            'rel' => 'stylesheet',
            'href' => $file_url,
          ],
        ];
        
        return $element;
      }
    }
  }
  