<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\views\Views;
use Drupal\Core\Url;



define( 'DRUPALENTOR_PATH', drupal_get_path('module', 'drupalentor') );
define( 'DRUPALENTOR_CSS_PATH', 'public://css');



function drupalentor_theme($existing, $type, $theme, $path) {
  return array(
    'drupalentor-admin-form' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
        ),
        'path' => $path . '/templates/backend',
    ),
    'drupalentor-front' => array(
        'variables' => array(
            'page' => '',
            'content' => '',
        ),
        'path' => $path . '/templates/frontend',
    ),
      
  );
}

function drupalentor_preprocess_page(&$variables) {
  $variables['page']['#cache']['contexts'][] = 'route';
    $activeThemeName = \Drupal::service('theme.manager')->getActiveTheme()->getName(); 
    $defaultThemeName = \Drupal::config('system.theme')->get('default');    
    if($activeThemeName === $defaultThemeName){
        $variables['#attached']['library'][] = 'drupalentor/drupalentor.assets.frontend';
    }
}

function drupalentor_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.drupalentor':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allow users to request protected downloads.') . '</p>';
      return $output;
  }
}

  
  if(file_exists(DRUPALENTOR_PATH . '/widgets/_elements.php')){
    require DRUPALENTOR_PATH . '/widgets/_elements.php';
    $elements = [];
    if(function_exists('drupalentor_set_elements')){
      $elements = drupalentor_set_elements();
    }

    foreach( $elements as $el ){ //if don't use sub theme
        if(file_exists(DRUPALENTOR_PATH . '/widgets/' . $el . '.php')){
        $sc_path = DRUPALENTOR_PATH . '/widgets/' . $el . '.php';
        require($sc_path);
        }
    }

  }
function drupalentor_get_el_fields($widgetId){
    $el_fields = array();



        if(file_exists(DRUPALENTOR_PATH . '/widgets/' . $widgetId . '.php')){
          $_class = 'element_' . $widgetId;
      
          if( class_exists($_class) ){
            $s = new $_class;
           
            if(method_exists($s, 'render_form')){
              
               $el_fields = $s->render_form();
            }
          }
        }


    return $el_fields;
  }
  function drupalentor_get_widgets(){
    $el_fields = array();

    if(function_exists('drupalentor_set_elements')){
      $elements = drupalentor_set_elements();

      foreach( $elements as $el ){
       
        if(file_exists(DRUPALENTOR_PATH . '/widgets/' . $el . '.php')){
          $_class = 'element_' . $el;
         
          if( class_exists($_class) ){
            $s = new $_class;
           
            if(method_exists($s, 'render_form')){
                
               $el_fields[$el] = $s->render_form();
            
            }
          }
        }
      }
    }

    return $el_fields;
  }
function drupalentor_get_sections($html){
    $sections = [];
    $content = json_decode($html, true);

    foreach ( $content as $k => $row ) {
  
        $sections[$k] = $row['settings'];
    }

    return $content;
  }

function drupalentor_backend( $params ) {

}

function drupalentor_frontend( $params ) {
  
	$output = '';
	$classes = array(
		'1' => 'col-lg-1 col-md-1 col-sm-2 col-xs-12',
		'2' => 'col-lg-2 col-md-2 col-sm-4 col-xs-12',
		'3' => 'col-lg-3 col-md-3 col-sm-6 col-xs-12',
		'4' => 'col-lg-4 col-md-4 col-sm-12 col-xs-12',
		'5' => 'col-lg-5 col-md-5 col-sm-12 col-xs-12',
		'6' => 'col-lg-6 col-md-6 col-sm-12 col-xs-12',
		'7' => 'col-lg-7 col-md-7 col-sm-12 col-xs-12',
		'8' => 'col-lg-8 col-md-8 col-sm-12 col-xs-12',
		'9' => 'col-lg-9 col-md-9 col-sm-12 col-xs-12',
		'10' => 'col-lg-10 col-md-10 col-sm-12 col-xs-12',
		'11' => 'col-lg-11 col-md-11 col-sm-12 col-xs-12',
		'12' => 'col-lg-12 col-md-12 col-sm-12 col-xs-12',
	);
	$content = json_decode($params, true);
	ob_start();
	if ( ! empty( $content ) ) {
		foreach ( $content as $k => $row ) {
            
			print (drupalentor_render_el( $row ) );
		}
	}
	$output = ob_get_clean();		
   
	return $output;

}


function drupalentor_render_el( $data = array(), $content = '' ) {
    $settings = ! empty( $data['settings'] ) ? $data['settings'] : array();
    $data['settings']['first_level'] = true;
    $content_columns = '';

    if ( ! empty( $data['columns']) ){
        foreach ($data['columns'] as $key => $column) {
            $content_elements = '';
            $column['settings']['col_lg'] = $column['col_lg'];
         
            if(! empty( $column['elements'])){
                foreach ($column['elements'] as $key => $element) {
                    
                    $content_row_1 = ''; 
                    if(!empty($element['row'])){
                        $content_row_1 = drupalentor_render_row($element['row']);
                    }

                    if($element['element_name']=='gva_row'){
                        $content_elements .= $content_row_1;
                    }else{
                        $content_elements .= drupalentor_render_element($element['element_name'], $element['settings']);
                    }
                }
            }
            $content_columns .= drupalentor_render_element($column['element_name'], $column['settings'], $content_elements);
        }
    }
   
    $content = drupalentor_render_element($data['element_name'], $data['settings'], $content_columns);

    return $content;

}

function drupalentor_render_row($row = array()){
    
        $content_row = '';
        $content_columns = '';

        if ( ! empty( $row['columns']) ){
            foreach ($row['columns'] as $key => $column) {
                $content_elements = '';
                $column['settings']['col_lg'] = $column['col_lg'];
                if(! empty( $column['elements'])){
                    foreach ($column['elements'] as $key => $element) {
                        if($element['element_name'] == 'gva_row'){
                            $content_elements .= drupalentor_render_row($element['row']);
                        }else{
                            $content_elements .= drupalentor_render_element($element['element_name'], $element['settings']);
                        }
                    }
                }
                $content_columns .= drupalentor_render_element($column['element_name'], $column['settings'], $content_elements);
            }
        }

        $content_row = drupalentor_render_element($row['element_name'], $row['settings'], $content_columns);

        return $content_row;
}




function drupalentor_render_element($id = '', $settings = array(), $content =''){
    $_class = 'element_' . $id;

    if( class_exists($_class) ){

        $s = new $_class;

        if(method_exists($s, 'render_content')){
            foreach ( $settings as $key => $setting ) {
               
                if ( $key === $id ) {
                    foreach ( $setting as $name => $value ) {
                        $settings[$name] = $value;
                    }
                }
            }
            return $s->render_content( $settings, $content);
        }
    }
}





function drupalentor_load($nid) {
    $result = \Drupal::database()->select('{drupalentor}', 'd')
    ->fields('d')
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchObject();
    $page = new stdClass();
    if($result){   
        $page->nid = $result->nid;  
        $page->did = $result->did;
        $page->uid = $result->uid;
        $page->html = $result->html;
    }else{
        $page->html = array();
    }
  return $page;
}

function drupalentor_load_blocks() {
    $blocks = [];
    $entyties = Drupal\block\Entity\Block::loadMultiple();
    foreach ($entyties as $block) {
      $blocks[] = ['value' => $block->id(), 'text' => $block->label()];
    }
    return $blocks;
}

function drupalentor_load_views() {
     $getViews = Views::getViewsAsOptions(TRUE, 'all', NULL, FALSE, TRUE);
     $views = [];
     foreach ($getViews as $key => $view_name_master) {
        $view = Views::getView($key);
        foreach ($view->storage->get('display') as $name_id => $display_id) {
           if( $display_id['display_plugin'] == 'block' ){
              $views[] = ['value' => $key .','.$name_id, 'text' => $view_name_master];
           }
        }
     }
    return $views;
}


function drupalentor_generate_css($theme, $css, $name){

    $csspath = DRUPALENTOR_CSS_PATH;
    $suffix = time();
    \Drupal::state()->set('css_name', $name);
    $name = Drupal::state()->get('css_name') ?: NULL;

    $old_suffix = \Drupal::state()->get('drupalentor_suffix') ?: NULL;
    if ($old_suffix) {
        \Drupal::service('file_system')->delete($csspath . '/'.$name . $old_suffix . '.css');
    }
    \Drupal::state()->set('drupalentor_suffix', $suffix);
    \Drupal::service('file_system')->prepareDirectory($csspath, FileSystemInterface::MODIFY_PERMISSIONS);
    \Drupal::service('file_system')->saveData($css, $csspath . '/'.$name . $suffix . '.css', FileSystemInterface::EXISTS_REPLACE);
    \Drupal::state()->set('css_file_name', $name.$suffix.'.css');

    _drupal_flush_css_js();
}

function drupalentor_library_info_alter(&$libraries, $extension) {
    if ($extension != 'drupalentor') {
        return;
    }
    $css_suffix = \Drupal::state()->get('drupalentor_suffix') ?: NULL;
    $name = Drupal::state()->get('css_name') ?: NULL;
    $active_theme = \Drupal::theme()->getActiveTheme()->getName();
    $defaultThemeName = \Drupal::config('system.theme')->get('default');    

    if($active_theme === $defaultThemeName){
        if ($css_suffix) {
            $cssfile = DRUPALENTOR_CSS_PATH . '/'.$name . $css_suffix . '.css';
        }
        else {
            $cssfile = DRUPALENTOR_CSS_PATH . '/'.$name.'.css';
        }

        if (file_exists($cssfile)) {
            $css_path = '/'.ltrim(file_url_transform_relative(file_create_url($cssfile)), '/');
            $libraries['drupalentor_custom_styles']['css']['theme'][$css_path]['weight'] = 9999;
        }
    }
}

function drupalentor_page_attachments(array &$page) {
    $active_theme = \Drupal::theme()->getActiveTheme()->getName();
    $defaultThemeName = \Drupal::config('system.theme')->get('default');    
    $node = \Drupal::routeMatch()->getParameter('node');
    $current_uri = \Drupal::request()->getRequestUri();
    if($node){
        if($active_theme === $defaultThemeName && $current_uri != '/node/'.$node->id().'/drupalentor'){
            $page['#attached']['library'][] = 'drupalentor/drupalentor_custom_styles';
        }else{
            \Drupal::state()->get('css_file_name') ?: NULL;
            $page['#attached']['drupalSettings']['drupalentor']['load_c_styles'] = \Drupal::state()->get('css_file_name') ?: NULL;
        }
    }
}
