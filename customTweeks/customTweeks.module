<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Layout\LayoutDefault;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Routing\RouteMatchInterface;

define('CUSTOMTWEEKS_CSS_PATH', 'public://css');

function customTweeks_rebuild() {
//  customTweeks_generate_css();
}
function customTweeks_form_alter(&$form, &$form_state, $form_id) {

}


function customTweeks_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {
    $image_styles = \Drupal::entityQuery('image_style')->execute();
    $formObject = $form_state->getFormObject();
    $config = $formObject->getLayout()->getConfiguration();
    if (!$config) {
        $config = [];
    } 
//    dump($config['custom_styles']);
    $container = $config['custom_styles']['container'] ?? NULL;
    $selected_color = $config['custom_styles']['color'] ?? NULL;
    $selected_media = $config['custom_styles']['media'] ?? NULL;
    $selected_image_style = $config['custom_styles']['media_style'] ?? 'large';
    $selected_position = $config['custom_styles']['position'] ?? 'center center';
    
    /* structure */
    $padding_unit = $config['custom_styles']['padding_unit'] ?? 'px';
    $padding_top = $config['custom_styles']['padding_top'] ?? NULL;
    $padding_right = $config['custom_styles']['padding_right'] ?? NULL;
    $padding_bottom = $config['custom_styles']['padding_bottom'] ?? NULL;
    $padding_left = $config['custom_styles']['padding_left'] ?? NULL;
    
    $margin_unit = $config['custom_styles']['margin_unit'] ?? 'px';
    $margin_top = $config['custom_styles']['margin_top'] ?? NULL;
    $margin_right = $config['custom_styles']['margin_right'] ?? NULL;
    $margin_bottom = $config['custom_styles']['margin_bottom'] ?? NULL;
    $margin_left = $config['custom_styles']['margin_left'] ?? NULL;
    
    $form['custom_styles'] = [
    '#type'  => 'details',
    '#title' => t('Custom Styles'),
    '#open' => TRUE,
    '#weight' => 95,
    ];
    $form['custom_styles']['container'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Container'),
    '#options' => array(
        'container' => t('Yes'),
    ),
    '#default_value' => $container,
    );
    $form['custom_styles']['custom_styles_background'] = [
    '#type'  => 'details',
    '#title' => t('Background Styles'),
    '#open' => FALSE,
    '#weight' => 96,
    ];
    $form['custom_styles']['custom_styles_background']['color'] = [
    '#type'  => 'textfield',
    '#title' => t('Color'),
    '#default_value' => $selected_color,
    '#description' => t('A valid <a href="https://developer.mozilla.org/docs/Web/CSS/color_value">CSS color</a> (Ex: "#336699", "red", "rgba(0,0,0,.5)", etc.'),
    ];
    $form['custom_styles']['custom_styles_background']['media'] = [
    '#type' => 'media_library',
    '#allowed_bundles' => ['image'],
    '#title' => t('Image'),
    '#default_value' => $selected_media,
    '#description' => t('Upload or select a background image.'),
    ];
    $form['custom_styles']['custom_styles_background']['media_style'] = [
    '#type' => 'select',
    '#allowed_bundles' => ['image'],
    '#title' => t('Image style'),
    '#options' => $image_styles,
    '#default_value' => $selected_image_style,
    '#description' => t('Select your image style.'),
    ];
    $form['custom_styles']['custom_styles_background']['position'] = [
    '#type' => 'select',
    '#title' => t('Background position'),
    '#options' => [
    'left top' => t('left top'),
    'left center' => t('left center'),
    'left bottom' => t('left bottom'),
    'center top' => t('center top'),
    'center center' => t('center center'),
    'center bottom' => t('center bottom'),
    'right top' => t('right top'),
    'right center' => t('right center'),
    'right bottom' => t('right bottom'),
    ],
    '#default_value' => $selected_position,
    ];
    $form['custom_styles']['structure'] = [
    '#type'  => 'details',
    '#title' => t('Structure Styles'),
    '#open' => FALSE,
    '#weight' => 97,
    ];
    $form['custom_styles']['structure']['padding_unit'] = [
    '#type' => 'select',
    '#title' => t('Padding in px or %'),
    '#options' => [
    'px' => t('px'),
    '%' => t('%'),
    ],
    '#default_value' => $padding_unit,
    ];
    $form['custom_styles']['structure']['padding_top'] = [
    '#type'  => 'textfield',
    '#title' => t('Padding Top'),
    '#default_value' => $padding_top,
    ];
    $form['custom_styles']['structure']['padding_right'] = [
    '#type'  => 'textfield',
    '#title' => t('Padding Right'),
    '#default_value' => $padding_right,
    ];
    $form['custom_styles']['structure']['padding_bottom'] = [
    '#type'  => 'textfield',
    '#title' => t('Padding Bottom'),
    '#default_value' => $padding_bottom,
    ];
    $form['custom_styles']['structure']['padding_left'] = [
    '#type'  => 'textfield',
    '#title' => t('Padding Left'),
    '#default_value' => $padding_left,
    ];    
    
    $form['custom_styles']['structure']['margin_unit'] = [
    '#type' => 'select',
    '#title' => t('Margin in px or %'),
    '#options' => [
    'px' => t('px'),
    '%' => t('%'),
    ],
    '#default_value' => $margin_unit,
    ];
    $form['custom_styles']['structure']['margin_top'] = [
    '#type'  => 'textfield',
    '#title' => t('Margin Top'),
    '#default_value' => $margin_top,
    ];
    $form['custom_styles']['structure']['margin_right'] = [
    '#type'  => 'textfield',
    '#title' => t('Margin Right'),
    '#default_value' => $margin_right,
    ];
    $form['custom_styles']['structure']['margin_bottom'] = [
    '#type'  => 'textfield',
    '#title' => t('Margin Bottom'),
    '#default_value' => $margin_bottom,
    ];
    $form['custom_styles']['structure']['margin_left'] = [
    '#type'  => 'textfield',
    '#title' => t('Margin Left'),
    '#default_value' => $margin_left,
    ];
    
    array_unshift($form['#submit'], '_layout_builder_customTweeks_submit');
}

function _layout_builder_customTweeks_submit(array $form, FormStateInterface $form_state) {

    
    $formObject = $form_state->getFormObject();
    $config = $formObject->getLayout()->getConfiguration();
    if (!$config) {
        $config = [];
    } 

    $container = $form_state->getValue('custom_styles')['container'] ?? NULL;
    $color = $form_state->getValue('custom_styles')['custom_styles_background']['color'] ?? NULL;    
    $media = $form_state->getValue('custom_styles')['custom_styles_background']['media'] ?? NULL;
    $media_style = $form_state->getValue('custom_styles')['custom_styles_background']['media_style'] ?? NULL;
    $position = $form_state->getValue('custom_styles')['custom_styles_background']['position'] ?? NULL;
    
    /* structure */
    $padding_unit = $form_state->getValue('custom_styles')['structure']['padding_unit'] ?? 'px';
    $padding_top = $form_state->getValue('custom_styles')['structure']['padding_top'] ?? NULL;
    $padding_right = $form_state->getValue('custom_styles')['structure']['padding_right'] ?? NULL;
    $padding_bottom = $form_state->getValue('custom_styles')['structure']['padding_bottom'] ?? NULL;
    $padding_left = $form_state->getValue('custom_styles')['structure']['padding_left'] ?? NULL;
    
    $margin_unit = $form_state->getValue('custom_styles')['structure']['margin_unit'] ?? 'px';
    $margin_top = $form_state->getValue('custom_styles')['structure']['margin_top'] ?? NULL;
    $margin_right = $form_state->getValue('custom_styles')['margin_right'] ?? NULL;
    $margin_bottom = $form_state->getValue('custom_styles')['structure']['margin_bottom'] ?? NULL;
    $margin_left = $form_state->getValue('custom_styles'['structure'])['margin_left'] ?? NULL;
    
    if ($container) {
        $custom_styles_config = [
            'custom_styles' => [
                'container' => $container,
                'color' => $color,
                'media' => $media,
                'media_style' => $media_style,
                'position' => $position,
                'padding_unit' => $padding_unit,
                'padding_top' => $padding_top,
                'padding_right' => $padding_right,
                'padding_bottom' => $padding_bottom,
                'padding_left' => $padding_left,
                'margin_unit' => $margin_unit,
                'margin_top' => $margin_top,
                'margin_right' => $margin_right,
                'margin_bottom' => $margin_bottom,
                'margin_left' => $margin_left,

            ],
        ];
        $config = array_merge($config, $custom_styles_config);
    }

    // Otherwise, remove settings if they exist. This would occur in the case
    // where a section previously had background settings but they were removed.
    else {
        unset($config['custom_styles']);
        unset($config['custom_styles_background']);
        unset($config['structure']);
    }

    $formObject
    ->getLayout()
    ->setConfiguration($config);
}

function customTweeks_preprocess_layout(&$variables) {
  // Apply a background to a layout by adding inline CSS if one is set.

 
//        dump($variables);
  if (isset($variables['settings']['custom_styles'])) {

    $config = $variables['settings']['custom_styles'];
    $container = $config['container']['container'] ?? NULL;
    $color = $config['color'] ?? NULL;
    $media = $config['media'] ?? NULL;
    $media_style = $config['media_style'] ?? 'large';
    $position = $config['position'] ?? NULL;

    /* structure */  
    $padding_top = $config['padding_top'] ?? NULL;
    $padding_right = $config['padding_right'] ?? NULL;
    $padding_bottom = $config['padding_bottom'] ?? NULL;
    $padding_left = $config['padding_left'] ?? NULL;
    $margin_top = $config['margin_top'] ?? NULL;
    $margin_right = $config['margin_right'] ?? NULL;
    $margin_bottom = $config['margin_bottom'] ?? NULL;
    $margin_left = $config['margin_left'] ?? NULL;

    $new_classes = [];
    $array_style = [];
      
    $new_classes[] = 'region-layout-builder-customtweeks';
    $sectionClass = 'layout-builder-customtweeks-'.$variables['attributes']['data-layout-delta'];
    $variables['attributes']['class'][] = $sectionClass;

    $new_classes[] = $container; 
      
    if ($color) {
      $array_style[] = 'background-color: ' . $color;
    }
    if ($media) {
      $media_entity = Media::load($media);
      if ($media_entity) {
        $fid = $media_entity->getSource()->getSourceFieldValue($media_entity);
        $file = File::load($fid);
        $url = ImageStyle::load($media_style)->buildUrl($file->getFileUri());
        $media_image_styles = [
          'background-image: url(' . $url . ')',
          'background-position: ' . $position,
          'background-size: cover',
          'background-repeat: no-repeat',
        ];
        $array_style = array_merge($array_style, $media_image_styles);
      }
    }
      
    if($padding_top) $array_style[] = 'padding-top:'. intval( $padding_top ) . $config['padding_unit'];
    if($padding_right) $array_style[] = 'padding-right:'. intval( $padding_right ) . $config['padding_unit'];
    if($padding_bottom) $array_style[] = 'padding-bottom:'. intval( $padding_bottom ) . $config['padding_unit'];
    if($padding_left) $array_style[] = 'padding-left:'. intval( $padding_left ) . $config['padding_unit'];
      
    if($margin_top) $array_style[] = 'margin-top:'. intval( $margin_top ) . $config['margin_unit'];
    if($margin_right) $array_style[] = 'margin-right:'. intval( $margin_right ) . $config['margin_unit'];
    if($margin_bottom) $array_style[] = 'margin-bottom:'. intval( $margin_bottom ) . $config['margin_unit'];
    if($margin_left) $array_style[] = 'margin-left:'. intval( $margin_left ) . $config['margin_unit'];
    
    $region_style = '.'.$sectionClass.'{'.implode('; ', $array_style ).'}';

//    dump($variables);
    if(isset($variables['region_attributes']['content'])){
        $variables['region_attributes']['content']['class'] = array_merge($variables['region_attributes']['content']['class']->value(), $new_classes);
//               dump($variables);
    }

    // Update style attribute.
    if (!isset($variables['attributes']['style']) || !is_array($variables['attributes']['style'])) {
      $variables['attributes']['style'] = [];
    }
//      dump($region_style);
//    $variables['attributes']['style'][] = $region_style;  
//      $less = new lessc();
//      $css = $less->compile($css);
      
      customTweeks_generate_css($region_style);
  }
}
function customTweeks_css_alter(&$css, AttachedAssetsInterface $assets) {
  $css_suffix = \Drupal::state()->get('customtweeks_css_suffix') ?: NULL;
//  $themes = \Drupal::config('extra_css_js.settings')->get('extra_css_js_themes');
  $active_theme = \Drupal::service('theme.manager')->getActiveTheme()->getName();
    if ($css_suffix) {
      $cssfile = CUSTOMTWEEKS_CSS_PATH . '/customtweeks_' . $css_suffix . '.css';
    }
    else {
      $cssfile = CUSTOMTWEEKS_CSS_PATH . '/customtweeks_.css';
    }
    if (file_exists($cssfile) && $css) {
      $css_path = ltrim(file_url_transform_relative(file_create_url($cssfile)), '/');
      if (!empty($css_path)) {
        $css[$css_path] = [
          'weight' => CSS_COMPONENT,
          'group' => CSS_AGGREGATE_DEFAULT,
          'type' => 'file',
          'data' => $css_path,
          "version" => -1,
          'media' => 'all',
          'preprocess' => TRUE,
          'browsers' => [
            'IE' => TRUE,
            '!IE' => TRUE,
          ],
        ];
      }
    }
  
}
function customTweeks_generate_css($css) {
    $csspath = CUSTOMTWEEKS_CSS_PATH;
      $css_suffix = time();
     \Drupal::state()->set('customtweeks_css_suffix', $css_suffix);
        \Drupal::service('file_system')->saveData($css, $csspath . '/customtweeks_' . $css_suffix . '.css', FileSystemInterface::EXISTS_REPLACE);
      // We should flush CSS cache so that aggregated CSS gets rebuilt.
  \Drupal::service('asset.css.collection_optimizer')->deleteAll();
}
